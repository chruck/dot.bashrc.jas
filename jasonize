#!/bin/bash

##
# @file jasonize.sh
# @author Jas Eckard <eckard@clemson.edu>
#
# @section LICENSE
#
# (GPL license?)
# 
# @section DESCRIPTION
#
# This file prepares a remote machine to be usable by Jas

# Return codes:  1 = bad parameter(s)
#                2 = required parameter missing

readonly localDir="$(cd ${BASH_SOURCE[0]%/*} && pwd -P && cd - >/dev/null)"

# To get some debug output call this file like:
# DEBUG=true ./jasonize ...

echoStderr() { echo "$@" 1>&2; }

if [[ 'x' == "x${DEBUG}" ]]; then
        # Make `debug' a no-op
        debug() { :; }
else
        debug() { 
                echoStderr -n "DEBUG:  "
                echoStderr "$@"
        }
fi

# Usages:
#echo “regular stdout output”
#echoStderr “regular stderr output”
#debug “stderr output only seen when DEBUG set”

declare rc=0
declare remote

Usage()
{
        cat 1>&2 <<EOFUsage

Usage:  $0 [user@]remoteMachine

  -h, -?, --help        Display this help and exit

EOFUsage
        exit ${rc}
}  # Usage()

parseOptions()
{
        debug "Original args:  $@"

        local shortopts="h?" ; local longopts="help,"

        debug "shortopts=${shortopts} longopts=${longopts}"

        ARGS=$(getopt -o "${shortopts}" -l "${longopts}" -n "getopt.sh" -- "$@")

        getoptRc=$?
        if [[ 0 -ne "${getoptRc}" ]]; then
                echoStderr "ERROR:  getopt called incorrectly, rc=${getoptRc}"
                rc=1
                exit ${rc}
                # Alternatively, ($rc gets passed):
                #Usage
        fi

        eval set -- "${ARGS}"

        while true; do
                param=$1
                case "${param}" in
                        -h|-\?|--help)
                                debug "Asked for help"
                                Usage
                                ;;
                        --)
                                shift;
                                break;
                                ;;
                        *)
                                echoStderr "ERROR:  Unimplemented option: ${param}"
                                break;
                                ;;
                esac
        done

        debug "New args:  $@"

        # For 1 required argument
        if [[ 1 != ${#@} ]]; then
                rc=2
                echoStderr "ERROR:  [user@]remoteMachine required."
        fi

        remote=$1

        if [[ 0 != ${rc} ]]; then
                Usage
        fi
}  # parseOptions()

# TODO:  Verify the parameters passed are valid
verifyParams()
{
        # Not only does this verify, if this is the first time this
        # machine has connected to it, it'll ask to add the fingerprint
        if ! ssh-copy-id ${remote}; then
                rc=1
                exit ${rc}
        fi
}  # verifyParams()

#        while read line; do
#                echoStderr "WARNING:  I do not like ${line}"
#        done < <(grep "^${softwarebom}" ${steutabFName})  

doStuff()
{
        rsync ${HOME}/src/dot.bashrc.jas/.bashrc.jas ${remote}:
        ssh ${remote} mv .bashrc .bashrc.orig
        ssh ${remote} mv .bash_profile .bash_profile.orig
        ssh ${remote} ln -s .bashrc.jas .bashrc
        #ssh ${remote} bash -c ". ${HOME}/.bashrc mkprofile"
        ssh ${remote} ./.bashrc.jas mkprofile
        ssh ${remote}
}  # doStuff()

parseOptions "$@"
verifyParams
doStuff
